"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"type":"object","properties":{"index":{"type":"number"},"likes":{"type":"number"}},"required":["index","likes"],"additionalProperties":false};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.index === undefined) && (missing0 = "index")) || ((data.likes === undefined) && (missing0 = "likes"))){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "index") || (key0 === "likes"))){validate20.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.index !== undefined){let data0 = data.index;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate20.errors = [{instancePath:instancePath+"/index",schemaPath:"#/properties/index/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.likes !== undefined){let data1 = data.likes;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate20.errors = [{instancePath:instancePath+"/likes",schemaPath:"#/properties/likes/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}